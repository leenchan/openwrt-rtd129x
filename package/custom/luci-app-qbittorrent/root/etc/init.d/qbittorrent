#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

NAME=qbittorrent
APP="qbittorrent"
BIN_NAME="qbittorrent-nox"
BIN_DEFAULT="/usr/bin/qbittorrent-nox"
BIN_DIR="/usr/share/qbittorrent"
EXTRA_COMMANDS="get_status get_conf set_preferences update_trackerslist reset reset_password api install tt"
APP_OPTIONS=$(cat <<-EOF
enabled:bool:0
bin_path:string:$BIN_DEFAULT
run_as_user:string:root
profile_dir:string:/tmp
download_dir:string:/root/Downloads
webui_port:port:8080
webui_lang:or("en","zh"):en
webui_username:string:root
webui_password:string:adminadmin
trackerslist:string:
EOF
)

_info() {
	logger -p daemon.info -t "$APP" "$*"
}

_err() {
	logger -p daemon.err -t "$APP" "$*"
}

_validate_options () {
	uci_load_validate "$APP" qbittorrent "$1" "$2" $APP_OPTIONS
}

_uci_import() {
	uci -q batch <<-EOF >/dev/null
	$1
	commit ${NAME}
	EOF
	return $?
}

_api_code() {
	_API_CODE="$1"
	_API_CODE_DATA=""
	[ -z "$_API_CODE" ] && _API_CODE="0"
	[ "$_API_CODE" = "0" -o "$_API_CODE" = "200" ] && _API_CODE_STATUS="true" || _API_CODE_STATUS="false"
	case $_API_CODE in
		"500")
			_API_CODE_DATA="\"error\": \"not running\""
			;;
	esac
	[ -z "$2" ] || _API_CODE_DATA="$2"
	cat <<-EOF
	{
	  "status": $_API_CODE_STATUS,
	  "code": $_API_CODE$([ -z "$_API_CODE_DATA" ] || echo ",")
	  $([ -z "$_API_CODE_DATA" ] || echo "$_API_CODE_DATA")
	}
	EOF
	return $_API_CODE
}

_api_post() {
	curl -i -H "$_API_HEADER_TOKEN" -d "$2" "$1" 2>/dev/null
}

_api_get() {
	_RES_=$(curl -H "$_API_HEADER_TOKEN" "$1" 2>/dev/null)
	[ "$_RES_" = "Forbidden" ] && {
		_api_code 403 "\"error\": \"Forbidden\""
		return 1
	}
	[ -z "$_RES_" ] && {
		_api_code 400 "\"error\": \"Failed\""
		return 1
	}
	echo "$_RES_"
	return 0
}

_api_auth() {
	_API_AUTH_SUCCESS="0"
	_API_AUTH_RETRY="0"
	while true
	do
		[ $_API_AUTH_RETRY -gt 3 ] && break
		_API_TOKEN=$(cat "$TOKEN_FILE" 2>/dev/null)
		[ -z "$_API_TOKEN" ] && {
			_API_AUTH_USERNAME=$(_get_conf_value 'WebUI\\Username')
			_API_AUTH_PASSWORD=$(_get_conf_value 'WebUI\\Password_(PBKDF2|ha1)')
			[ -z "$_API_AUTH_PASSWORD" ] || _API_AUTH_PASSWORD=$(_get_conf_value 'WebUI\\Password' "$CONF_EXTRA_FILE")
			[ -z "$_API_AUTH_PASSWORD" ] && _API_AUTH_PASSWORD="adminadmin"
			_API_TOKEN=$(curl -i -d "username=$_API_AUTH_USERNAME&password=$_API_AUTH_PASSWORD" "$_API_URL_LOGIN" 2>/dev/null)
			_API_RES_CODE=$(echo "$_API_TOKEN" | head -n1 | awk '{print $2}')
			echo "$_API_RES_CODE" | grep -Eq '2[0-9]{2}' || {
				_api_code $_API_RES_CODE "\"error\": \"$(echo "$_API_TOKEN" | tail -n1)\""
				break
			}
			_API_TOKEN=$(echo "$_API_TOKEN" | grep -Eo 'SID=[^ ^;]+')
			[ -z "$_API_TOKEN" ] || echo "$_API_TOKEN" > "$TOKEN_FILE"
		}
		[ -z "$_API_TOKEN" ] || _API_HEADER_TOKEN="Cookie: $_API_TOKEN"
		if _api_get "$_API_URL_APP_VERSION" >/dev/null 2>&1; then
			_API_AUTH_SUCCESS="1" && break
		else
			rm -f "$TOKEN_FILE"
		fi
		_API_AUTH_RETRY=$((_API_AUTH_RETRY+1))
	done
	[ "$_API_AUTH_SUCCESS" = "1" ] && return 0
	return 1
}

_api() {
	_init || return 1
	_API_HOST=127.0.0.1
	_API_PORT=$(_get_webui_port)
	_API_URL="http://127.0.0.1:$_API_PORT/api/v2"
	_API_URL_LOGIN="$_API_URL/auth/login"
	_API_URL_APP_VERSION="$_API_URL/app/version"
	_API_URL_SET_PREFERENCES="$_API_URL/app/setPreferences"
	_API_URL_GET_PREFERENCES="$_API_URL/app/preferences"
	[ -z "$_API_PORT" ] && {
		_api_code 500
		return $?
	}
	_api_auth || return 1
	case "$1" in
		"set_preferences")
			_API_DATA=$2
			TRACKERSLIST=$(echo "$_API_DATA" | grep -Eo '"trackerslist":"[^"]*"')
			[ -z "$TRACKERSLIST" ] || {
				TRACKERSLIST=$(echo "$TRACKERSLIST" | sed -E -e 's/"trackerslist":"(.*)"/\1/g' -e 's/\\n/\n/g')
				_uci_import "set ${NAME}.config.trackerslist='$TRACKERSLIST'"
				# sed -E -e 's/^\{/{\n/' -e 's/\}$/\n}/' -e 's/("?)(,")/\1,\n"/g'
				# _set_conf_extra 'Bittorrent\\Trackers' "$(echo "$TRACKERSLIST" | sed -E -e 's/\\n/,/g' -e 's/"trackerslist":"(.*)"/\1/')"
			}
			echo "$_API_DATA" | grep -q '^json=' || _API_DATA="json=$_API_DATA"
			_API_RES=$(_api_post "$_API_URL_SET_PREFERENCES" "$_API_DATA")
			_API_RES_CODE=$(echo "$_API_RES" | awk '$0~/^HTTP/{print $2}')
			[ "$_API_RES_CODE" = "200" ] && {
				_API_DATA_PASSWORD=$(echo "$2" | grep -Eo '"web_ui_password"\s*:\s*"[^"]+"')
				[ -z "$_API_DATA_PASSWORD" ] || {
					_set_conf_extra 'WebUI\\Password'
					_API_DATA_PASSWORD=$(echo "$_API_DATA_PASSWORD" | sed -E 's/"web_ui_password"\s*:\s*"(.*)"/\1/')
					sed -i '/^WebUI\\Password=/d' "$CONF_EXTRA_FILE" 2>/dev/null
					cat > "$CONF_EXTRA_FILE" <<-EOF 
					WebUI\Password=$_API_DATA_PASSWORD
					EOF
				}
				_api_code 0
				return 0
			}
			_api_code $_API_RES_CODE
			return $_API_RES_CODE
			;;
		"get_preferences")
			_api_get "$_API_URL_GET_PREFERENCES"
			return $?
			;;
	esac
	_api_code 404 "\"error\": \"Not support: $1\""
}

_set_conf_extra() {
	[ -z "$1" ] && return 1
	if grep -q "^${1}=" "$CONF_EXTRA_FILE" 2>/dev/null; then
		sed -Ei "s/^${1}=.*/${1}=${2}/" "$CONF_EXTRA_FILE"
	else
		echo "$(echo "$1" | sed 's/\\\\/\\/g')=${2}" >> "$CONF_EXTRA_FILE"
	fi
}

_init() {
	[ "$_OPTIONS_LOADED" ] && return 0
	if [ -z "$2" ]; then
		config_load "$APP"
		config_foreach _validate_options "$APP" _init
		return 0
	elif [ "$2" = "0" ]; then
		_OPTIONS_LOADED="1"
		eval $(echo "$APP_OPTIONS" | awk -F':' '{print toupper($1)"=\"$"$1"\";"}')
		[ -x "$BIN_PATH" ] && BIN="$BIN_PATH"
		APP_DIR="$PROFILE_DIR/qBittorrent"
		CONF_DIR="$APP_DIR/config"
		CACHE_DIR="$APP_DIR/cache"
		CONF_FILE="$CONF_DIR/qBittorrent.conf"
		CONF_EXTRA_FILE="$CONF_DIR/qBittorrent-extra.conf"
		TOKEN_FILE="$CACHE_DIR/token"
	else
		return 1
	fi
}

_is_running() {
	_get_pid >/dev/null 2>&1 && return 0 || return 1
}

_get_conf_value() {
	_CONF_FILE="$CONF_FILE"
	[ -z "$2" ] || _CONF_FILE="$2"
	[ -f "$_CONF_FILE" ] || return 1
	_CONF_VALUE=$(awk -F'=' "\$1~/$1/{gsub(/^$1=/,\"\",\$0); gsub(/(^\"|\"$)/,\"\",\$0); print \$0}" "$_CONF_FILE" 2>/dev/null)
	[ -z "$_CONF_VALUE" ] && return 1
	echo $_CONF_VALUE
	return 0
}

_get_pid() {
	_BIN=$(echo "$BIN" | awk -F'/' '{print $NF}')
	_PID=$(pidof $_BIN)
	[ -z "$_PID" ] && return 1
	echo $_PID
	return 0
}

_get_webui_port() {
	_WEBUI_PORT=$(netstat -tpan | awk '($NF~/qbittorrent-n.*$/ && $4~/:::[0-9]+$/){gsub(":::","",$4);print $4}')
	_WEBUI_PORT_UCI=$(uci get qbittorrent.config.webui_port)
	echo "$_WEBUI_PORT" | grep -q "$_WEBUI_PORT_UCI" && _WEBUI_PORT="$_WEBUI_PORT_UCI"
	[ -z "$_WEBUI_PORT" ] && return 1
	echo $_WEBUI_PORT
	return 0
}

_get_app_version() {
	_APP_VERSION=$($BIN -v | awk '{print $2}')
	[ -z "$_APP_VERSION" ] && return 1
	echo $_APP_VERSION
	return 0
}

_string_or_null() {
	if [ -z "$1" ]; then
		echo "null"
	else
		echo "\"$1\""
	fi
}

_create_dir() {
	[ -d "$1" ] || mkdir -p "$1"
}

_create_conf() {
	_create_dir "$CONF_DIR"
	# WebUI\LocalHostAuth=false
	[ -f "$CONF_FILE" ] || cat <<-EOF > $CONF_FILE
	[LegalNotice]
	Accepted=true

	[Network]
	Cookies=@Invalid()

	[Preferences]
	Downloads\SavePath=$DOWNLOAD_DIR
	General\Locale=$WEBUI_LANG
	WebUI\Username=$WEBUI_USERNAME
	WebUI\HostHeaderValidation=false
	EOF
	update_trackerslist "$TRACKERSLIST"
}

_extract_bt_trackers_from_list() {
	_RES_=""
	_TIMEOUT_=5
	_RETRY_=3
	while [ "$_RETRY_" -gt 0 ]
	do
		_RETRY_=$((_RETRY_-1))
		_RES_=$(curl -m${_TIMEOUT_} -skL "$1" | grep -Eo '(http|https|tcp|udp|ws|wss)://[^ ]+/[^/]*announce[^/]*$' 2>/dev/null)
		[ -z "$_RES_" ] || break
	done
	echo "$_RES_"
	return 0
}

_extract_bt_trackers() {
	_TRACKERS_ALL=$(echo "$1" | grep -Eo '(http|https|tcp|udp|ws|wss)://[^ ]+' | sort -u)
	_TRACKERS_NODES=$(echo "$_TRACKERS_ALL" | grep '/[^/]*announce[^/]*$')
	_TRACKERS_LIST=$(echo "$_TRACKERS_ALL" | grep -E '^https?:' | grep -v '/[^/]*announce[^/]*$')
	while read LIST
	do
		_TRACKERS_LIST_RES=$(_extract_bt_trackers_from_list "$LIST")
		[ -z "$_TRACKERS_LIST_RES" ] || _TRACKERS_NODES=$(cat <<-EOF
		$_TRACKERS_NODES
		$_TRACKERS_LIST_RES
		EOF
		)
	done <<-EOF
	$_TRACKERS_LIST
	EOF
	echo "$_TRACKERS_NODES" | sort -u
}

get_status() {
	_init || return 1
	_STATUS_PID=$(_get_pid)
	[ -z "$_STATUS_PID" ] && _STATUS_PID="null"
	_STATUS_WEBUI_PORT=$(_get_webui_port)
	[ -z "$_STATUS_WEBUI_PORT" ] && _STATUS_WEBUI_PORT="null"
	[ -z "$(_get_conf_value 'WebUI\\Password_(PBKDF2|ha1)')" ] && _STATUS_CHANGED_PASSWORD="false" || _STATUS_CHANGED_PASSWORD="true"
	_STATUS_VERSION=$(_get_app_version)
	[ -z "$_STATUS_VERSION" ] && _STATUS_VERSION="null" || _STATUS_VERSION="\"$_STATUS_VERSION\""
	_STATUS_BIN_LIST=$(cat <<-EOF | grep -E '^/' | awk '{LIST=LIST"\""$0"\","} END{gsub(/,$/,"",LIST); print LIST}' | tr -d '\n'
	$([ -x "$BIN_DEFAULT" ] && echo "$BIN_DEFAULT")
	$(ls /usr/share/qbittorrent/* 2>/dev/null)
	EOF
	)
	cat <<-EOF
	{
	  "pid": $_STATUS_PID,
	  "webui_port": $_STATUS_WEBUI_PORT,
	  "changed_password": $_STATUS_CHANGED_PASSWORD,
	  "bin_path": [$_STATUS_BIN_LIST],
	  "app_version": $_STATUS_VERSION
	}
	EOF
}

get_conf() {
	echo "$APP_OPTIONS" | awk -F':' '{
		NAME=$1
		TYPE=$2
		gsub(/[^:]+:[^:]+:/,"",$0)
		VALUE=TYPE == "string" || TYPE ~ /^or/ ? "\""$0"\"" : $0
		CURR="  \""NAME"\": "VALUE
		JSON=JSON ? JSON",\n"CURR : CURR
	} END {
		print "{\n"JSON"\n}"
	}'
}

reset() {
	_init || return 1
	rm -rf "$APP_DIR" && {
		_is_running && restart
	}
	_api_code 0; return 0
}

reset_password() {
	_init || return 1
	sed -Ei '/WebUI\\Password_(PBKDF2|ha1)=/d' "$CONF_FILE" 2>/dev/null
	sed -Ei '/WebUI\\Password=/d' "$CONF_EXTRA_FILE" 2>/dev/null
	_is_running && restart
	_api_code 0; return 0
}

# json: {"create_subfolder_enabled":true,"start_paused_enabled":false,"auto_delete_mode":false,"preallocate_all":false,"incomplete_files_ext":false,"auto_tmm_enabled":"false","torrent_changed_tmm_enabled":"true","save_path_changed_tmm_enabled":"false","category_changed_tmm_enabled":"false","save_path":"/mnt/sda/download/","temp_path_enabled":false,"temp_path":"/mnt/sda/download/temp/","export_dir":"","export_dir_fin":"","scan_dirs":{},"mail_notification_enabled":false,"mail_notification_sender":"qBittorrent_notification@example.com","mail_notification_email":"","mail_notification_smtp":"smtp.changeme.com","mail_notification_ssl_enabled":false,"mail_notification_auth_enabled":true,"mail_notification_username":"","mail_notification_password":"","autorun_enabled":false,"autorun_program":"","listen_port":55627,"upnp":true,"random_port":false,"max_connec":500,"max_connec_per_torrent":100,"max_uploads":20,"max_uploads_per_torrent":4,"proxy_type":0,"proxy_auth_enabled":false,"proxy_ip":"0.0.0.0","proxy_port":8080,"proxy_peer_connections":false,"proxy_torrents_only":false,"proxy_username":"","proxy_password":"","ip_filter_enabled":false,"ip_filter_path":"","ip_filter_trackers":false,"banned_IPs":"","auto_ban_enabled":false,"auto_ban_whitelist_mode":false,"auto_ban_pid_pattern":"^-(XL|SD|XF|QD|BN|DL)(\\w+)-$","auto_ban_pua_pattern":"","auto_ban_period":60,"up_limit":0,"dl_limit":0,"alt_up_limit":10240,"alt_dl_limit":10240,"bittorrent_protocol":"0","limit_utp_rate":true,"limit_tcp_overhead":false,"limit_lan_peers":true,"scheduler_enabled":false,"dht":true,"pex":true,"lsd":true,"encryption":"0","anonymous_mode":false,"queueing_enabled":true,"max_active_downloads":3,"max_active_uploads":3,"max_active_torrents":5,"dont_count_slow_torrents":false,"slow_torrent_dl_rate_threshold":2,"slow_torrent_ul_rate_threshold":2,"slow_torrent_inactive_timer":60,"max_ratio_enabled":false,"max_ratio":-1,"max_ratio_act":0,"max_seeding_time_enabled":false,"max_seeding_time":-1,"add_trackers_enabled":true,"add_trackers":"http://104.238.198.186:8000/announce","locale":"en","web_ui_domain_list":"*","web_ui_address":"*","web_ui_port":4080,"web_ui_upnp":true,"use_https":false,"web_ui_https_cert_path":"","web_ui_https_key_path":"","web_ui_username":"root","bypass_local_auth":false,"bypass_auth_subnet_whitelist_enabled":false,"bypass_auth_subnet_whitelist":"","web_ui_max_auth_fail_count":"5","web_ui_ban_duration":"3600","web_ui_session_timeout":"3600","alternative_webui_enabled":false,"alternative_webui_path":"","web_ui_clickjacking_protection_enabled":true,"web_ui_csrf_protection_enabled":true,"web_ui_secure_cookie_enabled":true,"web_ui_host_header_validation_enabled":true,"web_ui_use_custom_http_headers_enabled":false,"web_ui_custom_http_headers":"","dyndns_enabled":false,"dyndns_service":"0","dyndns_domain":"changeme.dyndns.org","dyndns_username":"","dyndns_password":"","current_network_interface":"","current_interface_address":"","save_resume_data_interval":"60","recheck_completed_torrents":false,"resolve_peer_countries":true,"async_io_threads":"4","file_pool_size":"40","checking_memory_use":"32","disk_cache":"-1","disk_cache_ttl":"60","enable_os_cache":true,"enable_coalesce_read_write":false,"enable_piece_extent_affinity":false,"enable_upload_suggestions":false,"send_buffer_watermark":"500","send_buffer_low_watermark":"10","send_buffer_watermark_factor":"50","socket_backlog_size":"30","outgoing_ports_min":"0","outgoing_ports_max":"0","upnp_lease_duration":"0","utp_tcp_mixed_mode":"0","enable_multi_connections_from_same_ip":false,"enable_embedded_tracker":false,"embedded_tracker_port":"9000","upload_slots_behavior":"0","upload_choking_algorithm":"1","announce_to_all_trackers":false,"announce_to_all_tiers":true,"announce_ip":"","stop_tracker_timeout":"5"}
update_trackerslist() {
	_init || return 1
	[ -z "$1" ] || TRACKERSLIST="$1"
	[ -z "$TRACKERSLIST" ] && {
		_api_code 2 "\"error\": \"No trackers\""
		return 1
	}
	_TRACKERSLIST=$(_extract_bt_trackers "$TRACKERSLIST")
	if [ -z "$_TRACKERSLIST" ]; then
		_TRACKERSLIST_COUNT=0
	else
		_TRACKERSLIST_COUNT=$(echo "$_TRACKERSLIST" | wc -l)
	fi
	if _is_running; then
		[ -z "$_TRACKERSLIST" ] || _TRACKERSLIST=$(echo "$_TRACKERSLIST" | awk '{LIST=LIST?LIST"\\n"$0:$0}END{print LIST}')
		_API_CODE=$(_api "set_preferences" "{\"add_trackers\":\"$_TRACKERSLIST\", \"add_trackers_enabled\":true}")
		if echo "$_API_CODE" | grep -q 'true'; then
			_api_code 0 "\"count\": $_TRACKERSLIST_COUNT"
		else
			_api_code "$_API_CODE"
		fi
	else
		[ -z "$_TRACKERSLIST" ] || _TRACKERSLIST=$(echo "$_TRACKERSLIST" | awk '{LIST=LIST?LIST"\\\\n"$0:$0}END{print LIST}')
		if _get_conf_value 'Bittorrent\\TrackersList' >/dev/null 2>&1; then
			sed -Ei "s|Bittorrent\\\\TrackersList=.*|Bittorrent\\\\TrackersList=$_TRACKERSLIST|" "$CONF_FILE"
		else
			sed -Ei "s|(\[Preferences\])|[Preferences]\nBittorrent\\\\TrackersList=$_TRACKERSLIST|" "$CONF_FILE"
		fi
		_api_code 0 "\"count\": $_TRACKERSLIST_COUNT"
	fi
}

api() {
	_api $@
}

install() {
	. /etc/os-release
	_REPO_="userdocs/qbittorrent-nox-static"
	[ "$1" = "enhanced" ] && _REPO_="c0re100/qBittorrent-Enhanced-Edition"
	_LATEST_RELEASE_URL_="https://github.com/${_REPO_}/releases/latest"
	_RELEASE_ARCH_=$(echo "$OPENWRT_ARCH"  | awk -F'_' '{print $1}')
	_RELEASE_TAG_=$(curl -skL "$_LATEST_RELEASE_URL_" | grep -Eo '/tag/[^"^&^;^:]+' | head -n1 | awk -F'/' '{print $NF}')
	[ -z "$_RELEASE_TAG_" ] && return 1
	_RELEASE_VERSION_=$(echo "$_RELEASE_TAG_" | awk '{gsub(/release-/,"v",$0); print $0}')
	_RELEASE_BIN_NAME_="qbittorrent$([ "$1" = "enhanced" ] && echo '-enhanced')-nox_$_RELEASE_VERSION_"
	[ -f "$BIN_DIR/$_RELEASE_BIN_NAME_" ] || {
		if [ "$1" = "enhanced" ]; then
			_RELEASE_DL_URL_=$(curl -skL "https://github.com/${_REPO_}/releases/expanded_assets/$_RELEASE_TAG_" | grep -Eo 'href="[^"]+\.zip"' | sed -E 's/href="(.*)"/\1/g' | grep "_${_RELEASE_ARCH_}-" |head -n1)
			[ -z "$_RELEASE_DL_URL_" ] && return 1
			_RELEASE_ZIP_NAME_=$(echo "$_RELEASE_DL_URL_" | awk -F'/' '{print $NF}')
			curl -o "/tmp/$_RELEASE_ZIP_NAME_" -L "https://github.com$_RELEASE_DL_URL_" || return 1
			unzip -d "/tmp" "/tmp/$_RELEASE_ZIP_NAME_" >/dev/null 2>&1 || return 1
			mv "/tmp/qbittorrent-nox" "$BIN_DIR/$_RELEASE_BIN_NAME_" && chmod +x "$BIN_DIR/$_RELEASE_BIN_NAME_"
		else
			_RELEASE_DL_URL_=$(curl -skL "https://github.com/${_REPO_}/releases/expanded_assets/$_RELEASE_TAG_" | grep -Eo 'href="[^"]+"' | sed -E 's/href="(.*)"/\1/g' | grep "/${_RELEASE_ARCH_}-qbittorrent-nox" | head -n1)
			[ -z "$_RELEASE_DL_URL_" ] && return 1
			curl -o "/tmp/$_RELEASE_BIN_NAME_" -L "https://github.com$_RELEASE_DL_URL_" || return 1
			mkdir -p "$BIN_DIR"
			mv "/tmp/$_RELEASE_BIN_NAME_" "$BIN_DIR/$_RELEASE_BIN_NAME_" && chmod +x "$BIN_DIR/$_RELEASE_BIN_NAME_"
		fi
	}
	uci -q batch <<-EOF >/dev/null
	set qbittorrent.config.bin_path='$BIN_DIR/$_RELEASE_BIN_NAME_'
	commit qbittorrent
	EOF
	_api_code 0 "$(cat <<-EOF
	"version": "$_RELEASE_VERSION_", "edition": "$1", "bin_path": "$BIN_DIR/$_RELEASE_BIN_NAME_"
	EOF
	)"
	# cat <<-EOF
	# {"version": "$_RELEASE_VERSION_", "edition": "$1", "bin_path": "$BIN_DIR/$_RELEASE_BIN_NAME_"}
	# EOF
	return 0
}

service_triggers() {
	procd_add_reload_trigger "$APP"
	procd_add_validation _validate_options
}

reload_service() {
	restart
}

start_service() {
	_init || return 1
	[ "$ENABLED" = "1" ] || return 1
	_create_conf
	procd_open_instance "$APP"
	procd_set_param command "$BIN"
	procd_append_param command --profile="$PROFILE_DIR"
	procd_append_param command --webui-port="$WEBUI_PORT"
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	[ -z "$RUN_AS_USER" ] || procd_set_param user "$RUN_AS_USER"
	procd_set_param file "$CONF_FILE"
	procd_close_instance
}

tt() {
	_init || return 1
	_set_conf_extra 'WebUI\\Password'
}
