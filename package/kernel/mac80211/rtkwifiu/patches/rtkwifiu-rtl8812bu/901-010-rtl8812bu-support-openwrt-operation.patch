--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812bu/os_dep/linux/ioctl_cfg80211.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812bu/os_dep/linux/ioctl_cfg80211.c
@@ -3240,7 +3240,7 @@ static int cfg80211_rtw_get_txpower(struct wiphy *wiphy,
 #endif
 	int *dbm)
 {
-	RTW_INFO("%s\n", __func__);
+	RTW_DBG("%s\n", __func__);
 
 	*dbm = (12);
 
@@ -4262,13 +4262,13 @@ static int	cfg80211_rtw_dump_station(struct wiphy *wiphy, struct net_device *nde
 	_adapter *padapter = (_adapter *)rtw_netdev_priv(ndev);
 	struct sta_info *psta = NULL;
 	struct sta_priv *pstapriv = &padapter->stapriv;
-	RTW_INFO(FUNC_NDEV_FMT"\n", FUNC_NDEV_ARG(ndev));
+	RTW_DBG(FUNC_NDEV_FMT"\n", FUNC_NDEV_ARG(ndev));
 
 	_enter_critical_bh(&pstapriv->asoc_list_lock, &irqL);
 	psta = rtw_sta_info_get_by_idx(idx, pstapriv);
 	_exit_critical_bh(&pstapriv->asoc_list_lock, &irqL);
 	if (NULL == psta) {
-		RTW_INFO("Station is not found\n");
+		RTW_DBG("Station is not found\n");
 		ret = -ENOENT;
 		goto exit;
 	}
@@ -5705,6 +5705,173 @@ static int cfg80211_rtw_sched_scan_stop(struct wiphy *wiphy,
 	return rtw_android_pno_enable(dev, _FALSE);
 }
 #endif /* CONFIG_PNO_SUPPORT */
+#ifdef CONFIG_FIND_BEST_CHANNEL
+static int get_best_channel(_adapter *padapter, enum nl80211_band band)
+{
+	struct mlme_ext_priv *pmlmeext = &padapter->mlmeextpriv;
+	u32 i, best_channel_24G = 1, best_channel_5G = 36, index_24G = 0, index_5G = 0;
+
+	for (i=0; pmlmeext->channel_set[i].ChannelNum !=0; i++) {
+		if ( pmlmeext->channel_set[i].ChannelNum == 1)
+			index_24G = i;
+		if ( pmlmeext->channel_set[i].ChannelNum == 36)
+			index_5G = i;
+	}
+
+	for (i=0; (i < MAX_CHANNEL_NUM) && (pmlmeext->channel_set[i].ChannelNum !=0) ; i++) {
+		if (pmlmeext->channel_set[i].ScanType == SCAN_PASSIVE)
+			continue;
+		// 2.4G
+		if ( pmlmeext->channel_set[i].ChannelNum == 6 || pmlmeext->channel_set[i].ChannelNum == 11) {
+			if ( pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_24G].rx_count ) {
+				index_24G = i;
+				best_channel_24G = pmlmeext->channel_set[i].ChannelNum;
+			}
+		}
+
+		// 5G
+		if ( pmlmeext->channel_set[i].ChannelNum >= 36
+			&& pmlmeext->channel_set[i].ChannelNum < 140 ) {
+			// Find primary channel
+			if ( (( pmlmeext->channel_set[i].ChannelNum - 36) % 8 == 0)
+				&& (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_5G].rx_count) ) {
+				index_5G = i;
+				best_channel_5G = pmlmeext->channel_set[i].ChannelNum;
+			}
+		}
+
+		if ( pmlmeext->channel_set[i].ChannelNum >= 149
+			&& pmlmeext->channel_set[i].ChannelNum < 165) {
+			// find primary channel
+			if ( (( pmlmeext->channel_set[i].ChannelNum - 149) % 8 == 0)
+				&& (pmlmeext->channel_set[i].rx_count < pmlmeext->channel_set[index_5G].rx_count) ) {
+				index_5G = i;
+				best_channel_5G = pmlmeext->channel_set[i].ChannelNum;
+			}
+		}
+	}
+
+	if (band == NL80211_BAND_2GHZ)
+		return best_channel_24G;
+
+	return best_channel_5G;
+}
+#endif
+
+static int cfg80211_rtw_dump_survey(struct wiphy *wiphy, struct net_device *dev, int idx, struct survey_info *survey)
+{
+	_adapter *padapter = wiphy_to_adapter(wiphy);
+	struct mlme_ext_priv *pmlmeext = &padapter->mlmeextpriv;
+	struct ss_res *ss = &pmlmeext->sitesurvey_res;
+	struct rtw_ieee80211_channel *ch;
+	struct ieee80211_supported_band *sband=NULL;
+	int freq, band=0;
+	int best_ch = -1;
+
+	if (idx >= ss->ch_num)
+		return -EINVAL;
+
+	ch = &ss->ch[idx];
+
+	if (!ch)
+		return -EINVAL;
+
+	if (ch->hw_value > 14)
+		band = NL80211_BAND_5GHZ;
+	else
+		band = NL80211_BAND_2GHZ;
+
+	sband = wiphy->bands[band];
+
+	if(!sband) {
+		printk("%s under unknown band!!\n",dev->name);
+		return -EINVAL;
+	}
+
+	if(sband->band == NL80211_BAND_2GHZ)
+		freq = ieee80211_channel_to_frequency(ch->hw_value, NL80211_BAND_2GHZ);
+	else
+		freq = ieee80211_channel_to_frequency(ch->hw_value, NL80211_BAND_5GHZ);
+
+	survey->channel = ieee80211_get_channel(wiphy, freq);
+	#ifdef CONFIG_FIND_BEST_CHANNEL
+	best_ch = get_best_channel(padapter, sband->band);
+	#endif
+
+	if (best_ch == ch->hw_value)
+		survey->noise = -100;
+	else
+		survey->noise = -50;
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4,0,0))
+	survey->time = 100;
+	survey->time_busy = 50;
+	survey->filled = SURVEY_INFO_NOISE_DBM | SURVEY_INFO_TIME | SURVEY_INFO_TIME_BUSY;
+#else
+	survey->channel_time = 100;
+	survey->channel_time_busy = 50
+	survey->filled = SURVEY_INFO_NOISE_DBM | SURVEY_INFO_CHANNEL_TIME | SURVEY_INFO_CHANNEL_TIME_BUSY;
+#endif
+
+	return 0;
+}
+
+static int cfg80211_rtw_get_channel(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_chan_def *chandef)
+{
+	_adapter *padapter = wiphy_to_adapter(wiphy);
+	struct dvobj_priv *dvobj = adapter_to_dvobj(padapter);
+	struct mlme_priv *pmlmepriv = &padapter->mlmepriv;
+	struct mlme_ext_priv *pmlmeext = &padapter->mlmeextpriv;
+	struct ieee80211_channel *chan;
+	enum nl80211_band band;
+	int ret = -ENODATA;
+	int freq;
+	u8 center_ch;
+
+	if (pmlmeext->cur_channel > 14)
+		band = NL80211_BAND_5GHZ;
+	else
+		band = NL80211_BAND_2GHZ;
+
+	freq = ieee80211_channel_to_frequency(pmlmeext->cur_channel, band);
+	chan = ieee80211_get_channel(wiphy, freq);
+
+	switch (pmlmeext->cur_bwmode) {
+	case CHANNEL_WIDTH_20:
+		chandef->width = NL80211_CHAN_WIDTH_20;
+		break;
+	case CHANNEL_WIDTH_40:
+		chandef->width = NL80211_CHAN_WIDTH_40;
+		break;
+	case CHANNEL_WIDTH_80:
+		chandef->width = NL80211_CHAN_WIDTH_80;
+		break;
+	case CHANNEL_WIDTH_80_80:
+		chandef->width = NL80211_CHAN_WIDTH_80P80;
+		break;
+	case CHANNEL_WIDTH_160:
+		chandef->width = NL80211_CHAN_WIDTH_160;
+		break;
+	default:
+		WARN_ON(1);
+		break;
+	}
+
+	center_ch = rtw_get_center_ch(pmlmeext->cur_channel, pmlmeext->cur_bwmode, pmlmeext->cur_ch_offset);
+	chandef->chan = chan;
+	chandef->center_freq1 = ieee80211_channel_to_frequency(center_ch, band);
+	chandef->center_freq2 = 0;
+
+	if (cfg80211_chandef_valid(chandef))
+		ret = 0;
+
+	#ifdef CONFIG_DEBUG_CFG80211
+	printk("%s: ret=%d, cur_channel=%d, cur_bwmode=%d, cur_ch_offset=%d, band=%d, center_ch=%d\n",
+		__func__, ret, pmlmeext->cur_channel, pmlmeext->cur_bwmode, pmlmeext->cur_ch_offset, band, center_ch);
+	#endif
+
+	return ret;
+}
 
 static int rtw_cfg80211_set_beacon_wpsp2pie(struct net_device *ndev, char *buf, int len)
 {
@@ -6371,6 +6538,7 @@ static void rtw_cfg80211_preinit_wiphy(_adapter *adapter, struct wiphy *wiphy)
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 2, 0))
 	/* wiphy->flags |= WIPHY_FLAG_SUPPORTS_FW_ROAM; */
 #endif
+	_rtw_memcpy(wiphy->perm_addr, adapter_mac_addr(adapter), ETH_ALEN);
 }
 
 static struct cfg80211_ops rtw_cfg80211_ops = {
@@ -6457,6 +6625,8 @@ static struct cfg80211_ops rtw_cfg80211_ops = {
 	.sched_scan_start = cfg80211_rtw_sched_scan_start,
 	.sched_scan_stop = cfg80211_rtw_sched_scan_stop,
 #endif /* CONFIG_PNO_SUPPORT */
+	.dump_survey = cfg80211_rtw_dump_survey,
+	.get_channel = cfg80211_rtw_get_channel,
 };
 
 struct wiphy *rtw_wiphy_alloc(_adapter *padapter, struct device *dev)
