--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8821cu/os_dep/linux/ioctl_cfg80211.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8821cu/os_dep/linux/ioctl_cfg80211.c
@@ -4046,7 +4046,7 @@ static int cfg80211_rtw_get_txpower(struct wiphy *wiphy,
 #endif
 	int *dbm)
 {
-	RTW_INFO("%s\n", __func__);
+	RTW_DBG("%s\n", __func__);
 
 	*dbm = (12);
 
@@ -5552,7 +5552,7 @@ static int	cfg80211_rtw_dump_station(struct wiphy *wiphy, struct net_device *nde
 	u8 asoc_list_num;
 
 	if (DBG_DUMP_STATION)
-		RTW_INFO(FUNC_NDEV_FMT"\n", FUNC_NDEV_ARG(ndev));
+		RTW_DBG(FUNC_NDEV_FMT"\n", FUNC_NDEV_ARG(ndev));
 
 	_enter_critical_bh(&pstapriv->asoc_list_lock, &irqL);
 	psta = rtw_sta_info_get_by_idx(pstapriv, idx, &asoc_list_num);
@@ -5573,7 +5573,7 @@ static int	cfg80211_rtw_dump_station(struct wiphy *wiphy, struct net_device *nde
 		#endif
 	) {
 		if (DBG_DUMP_STATION)
-			RTW_INFO(FUNC_NDEV_FMT" end with idx:%d\n", FUNC_NDEV_ARG(ndev), idx);
+			RTW_DBG(FUNC_NDEV_FMT" end with idx:%d\n", FUNC_NDEV_ARG(ndev), idx);
 		ret = -ENOENT;
 		goto exit;
 	}
@@ -9192,6 +9192,7 @@ static void rtw_cfg80211_preinit_wiphy(_adapter *adapter, struct wiphy *wiphy)
 		;
 #endif /* (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0)) */
 #endif /* CONFIG_RTW_MESH */
+	_rtw_memcpy(wiphy->perm_addr, adapter_mac_addr(adapter), ETH_ALEN);
 }
 
 #ifdef CONFIG_RFKILL_POLL
@@ -9365,6 +9366,63 @@ int rtw_hostapd_acs_dump_survey(struct wiphy *wiphy, struct net_device *netdev,
 }
 #endif /* defined(CONFIG_RTW_HOSTAPD_ACS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 33)) */
 
+static int cfg80211_rtw_get_channel(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_chan_def *chandef)
+{
+	_adapter *padapter = wiphy_to_adapter(wiphy);
+	struct dvobj_priv *dvobj = adapter_to_dvobj(padapter);
+	struct mlme_priv *pmlmepriv = &padapter->mlmepriv;
+	struct mlme_ext_priv *pmlmeext = &padapter->mlmeextpriv;
+	struct ieee80211_channel *chan;
+	enum nl80211_band band;
+	int ret = -ENODATA;
+	int freq;
+	u8 center_ch;
+
+	if (pmlmeext->cur_channel > 14)
+		band = NL80211_BAND_5GHZ;
+	else
+		band = NL80211_BAND_2GHZ;
+
+	freq = ieee80211_channel_to_frequency(pmlmeext->cur_channel, band);
+	chan = ieee80211_get_channel(wiphy, freq);
+
+	switch (pmlmeext->cur_bwmode) {
+	case CHANNEL_WIDTH_20:
+		chandef->width = NL80211_CHAN_WIDTH_20;
+		break;
+	case CHANNEL_WIDTH_40:
+		chandef->width = NL80211_CHAN_WIDTH_40;
+		break;
+	case CHANNEL_WIDTH_80:
+		chandef->width = NL80211_CHAN_WIDTH_80;
+		break;
+	case CHANNEL_WIDTH_80_80:
+		chandef->width = NL80211_CHAN_WIDTH_80P80;
+		break;
+	case CHANNEL_WIDTH_160:
+		chandef->width = NL80211_CHAN_WIDTH_160;
+		break;
+	default:
+		WARN_ON(1);
+		break;
+	}
+
+	center_ch = rtw_get_center_ch(pmlmeext->cur_channel, pmlmeext->cur_bwmode, pmlmeext->cur_ch_offset);
+	chandef->chan = chan;
+	chandef->center_freq1 = ieee80211_channel_to_frequency(center_ch, band);
+	chandef->center_freq2 = 0;
+
+	if (cfg80211_chandef_valid(chandef))
+		ret = 0;
+
+	#ifdef CONFIG_DEBUG_CFG80211
+	printk("%s: ret=%d, cur_channel=%d, cur_bwmode=%d, cur_ch_offset=%d, band=%d, center_ch=%d\n",
+		__func__, ret, pmlmeext->cur_channel, pmlmeext->cur_bwmode, pmlmeext->cur_ch_offset, band, center_ch);
+	#endif
+
+	return ret;
+}
+
 static struct cfg80211_ops rtw_cfg80211_ops = {
 	.change_virtual_intf = cfg80211_rtw_change_iface,
 	.add_key = cfg80211_rtw_add_key,
@@ -9480,6 +9538,7 @@ static struct cfg80211_ops rtw_cfg80211_ops = {
 #if defined(CONFIG_RTW_HOSTAPD_ACS) && (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 33))
 	.dump_survey = rtw_hostapd_acs_dump_survey,
 #endif
+	.get_channel = cfg80211_rtw_get_channel,
 };
 
 struct wiphy *rtw_wiphy_alloc(_adapter *padapter, struct device *dev)
